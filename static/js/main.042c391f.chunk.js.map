{"version":3,"sources":["urls.js","API.js","utils.js","components/Today/index.js","components/Week/index.js","App.js","index.js"],"names":["API","cache","useLocalStorageCache","query","res","this","localStorage","setItem","JSON","stringify","parse","getItem","city","sendRequest","locationID","period","date","getFullYear","getMonth","slice","getDate","formatDate","Date","Promise","resolve","reject","cachedRes","restoreFromCache","fetch","proxy","then","status","json","storeToCache","catch","err","console","error","Today","state","loading","data","setState","props","api","getWeather","prevProps","days","day","imgSrc","weatherProviderHost","weather_state_abbr","img","src","alt","weather_state_name","className","key","todayTemp","parseInt","the_temp","length","React","Component","Week","abbr","consolidated_weather","rows","map","rowClass","mapWeatherAbbrToRowClass","dayOfWeek","getDay","getDayOfWeekName","string","b","split","UTC","parseDate","applicable_date","App","locationQuery","locationFound","e","target","value","clearTimeout","timeout","setTimeout","getLocation","woeid","title","tabs","id","label","cmp","queryState","type","onChange","onLocationChange","disabled","tab","to","activeClassName","path","ReactDOM","render","document","getElementById"],"mappings":"+UAAO,ICGcA,E,iDACjBC,MAAQ,G,KACRC,sBAAuB,E,yDAEVC,EAAOC,GAChBC,KAAKH,qBAAuBI,aAAaC,QAAQ,SAAWJ,EAAOK,KAAKC,UAAUL,IAAQC,KAAKJ,MAAME,GAASC,I,uCAGjGD,GACb,OAAOE,KAAKH,qBAAuBM,KAAKE,MAAMJ,aAAaK,QAAQ,SAAWR,IAAUE,KAAKJ,MAAME,K,kCAG3FS,GACR,IAAMT,EAAQ,iBAAmBS,EACjC,OAAOP,KAAKQ,YAAYV,K,iCAGjBW,EAAYC,GACnB,IAAMC,ECrBP,SAAoBA,GAIvB,OAHWA,EAAKC,cAGF,KAFD,KAAOD,EAAKE,WAAa,IAAIC,OAAO,GAErB,KADjB,IAAMH,EAAKI,WAAWD,OAAO,GDkBvBE,CAAW,IAAIC,MACtBnB,EAAQW,GAAyB,UAAXC,EAAqB,IAAMC,EAAO,IAC9D,OAAOX,KAAKQ,YAAYV,K,kCAGhBA,GAAO,IAAD,OAGd,OAAO,IAAIoB,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAY,EAAKC,iBAAiBxB,GACpCuB,EACAF,EAAQE,GAIZE,MADYC,gFAAc1B,GAErB2B,MAAK,SAAA1B,GAAG,OACU,MAAfA,EAAI2B,OAAiB3B,EAAI4B,OAAS,CAACD,OAAQ3B,EAAI2B,WAElDD,MAAK,SAAA1B,GACF,EAAK6B,aAAa9B,EAAOC,GACzBoB,EAAQpB,MAEX8B,OAAM,SAAAC,GACHC,QAAQC,MAAMF,GACdV,EAAOU,a,KEFZG,G,kBAvCX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,SAAS,EACTC,KAAM,IAJD,E,0EAQA,IAAD,OACRpC,KAAKqC,SAAS,CAACF,SAAS,IACxBnC,KAAKsC,MAAMC,IAAIC,WAAWxC,KAAKsC,MAAM7B,WAAY,SAASgB,MAAK,SAAAW,GAC3D,EAAKC,SAAS,CAACF,SAAS,EAAOC,KAAMA,S,0CAKzCpC,KAAKwC,e,yCAGUC,GACXzC,KAAKsC,MAAM7B,aAAegC,EAAUhC,YACpCT,KAAKwC,e,+BAKT,IAAIE,EAAO1C,KAAKkC,MAAME,MAAQ,GAC1BO,EAAMD,EAAK,IAAM,GACjBE,EAASC,kDAA+CF,EAAIG,mBAAqB,OACjFC,EAAM,yBAAKC,IAAKJ,EAAQK,IAAKN,EAAIO,mBAAoBC,UAAU,eAAeC,IAAI,OAClFC,EAAY,wBAAIF,UAAU,YAAYC,IAAI,MAAME,SAASX,EAAIY,UAAY,QAC7E,OAAOvD,KAAKkC,MAAMC,QACd,yBAAKgB,UAAU,SAAf,cACCT,EAAKc,OACF,CAACT,EAAKM,GACN,yBAAKF,UAAU,SAAf,e,GApCIM,IAAMC,YCqEXC,G,kBAnEX,aAAc,IAAD,8BACT,+CACKzB,MAAQ,CACTC,SAAS,EACTC,KAAM,IAJD,E,0EAQA,IAAD,OACRpC,KAAKqC,SAAS,CAACF,SAAS,IACxBnC,KAAKsC,MAAMC,IAAIC,WAAWxC,KAAKsC,MAAM7B,WAAY,QAAQgB,MAAK,SAAAW,GAC1D,EAAKC,SAAS,CAACF,SAAS,EAAOC,KAAMA,S,0CAKzCpC,KAAKwC,e,yCAGUC,GACXzC,KAAKsC,MAAM7B,aAAegC,EAAUhC,YACpCT,KAAKwC,e,+CAIYoB,GACrB,OAAQA,GACJ,IAAK,KACL,IAAK,KACL,IAAK,IACD,MAAO,QACX,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,IACD,MAAO,QACX,IAAK,KACL,IAAK,KACD,MAAO,SACX,IAAK,IACD,MAAO,QACX,QACI,MAAO,M,+BAIV,IAAD,OACAlB,EAAO1C,KAAKkC,MAAME,KAAKyB,sBAAwB,GAC/CC,EAAOpB,EAAKqB,KAAI,SAAApB,GAChB,IAAIC,EAASC,kDAA+CF,EAAIG,mBAAqB,OACjFkB,EAAW,EAAKC,yBAAyBtB,EAAIG,oBAE7CoB,EF9CT,SAA0BvD,GAE7B,MADW,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAC5DA,EAAKwD,UE4COC,CFnDrB,SAAmBC,GACtB,IAAIC,EAAID,EAAOE,MAAM,OACrB,OAAO,IAAItD,KAAKA,KAAKuD,IAAIF,EAAE,KAAMA,EAAE,GAAIA,EAAE,KEgDtBG,CAAU9B,EAAI+B,kBAEzB,OAAO,wBAAItB,IAAKT,EAAI+B,gBAAiBvB,UAAWa,GAC5C,wBAAIb,UAAU,QAAQR,EAAI+B,gBAA1B,KAA6CR,GAC7C,4BAAKZ,SAASX,EAAIY,UAAY,QAC9B,wBAAIJ,UAAU,eAAc,yBAAKH,IAAKJ,EAAQK,IAAKN,EAAIO,0BAG/D,OAAOlD,KAAKkC,MAAMC,QACd,yBAAKgB,UAAU,SAAf,cACCT,EAAKc,OACF,2BAAOL,UAAU,QAAO,+BAAQW,IAChC,yBAAKX,UAAU,SAAf,e,GAhEGM,IAAMC,YC+DViB,G,kBAtDb,aAAc,IAAD,8BACX,+CAJFpC,IAAM,IAAI5C,EAKR,EAAKuC,MAAQ,CACXC,SAAS,EACTyC,cAAe,SACfC,eAAe,EACfpE,WAAY,SANH,E,8EAUIqE,GAAG,IAAD,OACjB9E,KAAKqC,SAAS,CAACuC,cAAeE,EAAEC,OAAOC,QACvCC,aAAajF,KAAKkF,SAClBlF,KAAKkF,QAAUC,YAAW,WACxB,EAAK9C,SAAS,CAACF,SAAS,IACxB,EAAKI,IAAI6C,YAAY,EAAKlD,MAAM0C,eAAenD,MAAK,SAAAW,GAClD,IAAMyC,IAAkBzC,EAAK,GACvB3B,EAAaoE,EAAgBzC,EAAK,GAAGiD,MAAQ,EAC7CT,EAAgBC,EAAgBzC,EAAK,GAAGkD,MAAQ,EAAKpD,MAAM0C,cACjE,EAAKvC,SAAS,CAACF,SAAS,EAAOyC,gBAAeC,gBAAepE,oBAE9D,O,+BAGI,IAAD,OACA8E,EAAO,CACX,CAACC,GAAI,QAASC,MAAO,QAASC,IAAK,kBAAC,EAAD,CAAOnD,IAAKvC,KAAKuC,IAAK9B,WAAYT,KAAKkC,MAAMzB,cAChF,CAAC+E,GAAI,OAAQC,MAAO,OAAQC,IAAK,kBAAC,EAAD,CAAMnD,IAAKvC,KAAKuC,IAAK9B,WAAYT,KAAKkC,MAAMzB,eAEzEkF,EAAc3F,KAAKkC,MAAM2C,cAA4B,GAAZ,UAC/C,OACE,kBAAC,IAAD,KACE,2BAAOe,KAAK,OAAOzC,UAAW,iBAAmBwC,EAAYX,MAAOhF,KAAKkC,MAAM0C,cAC7EiB,SAAU,SAAAf,GAAC,OAAI,EAAKgB,iBAAiBhB,IAAIiB,SAAU/F,KAAKkC,MAAMC,UAChE,6BACE,4BACGoD,EAAKxB,KAAI,SAAAiC,GAAG,OACX,wBAAI5C,IAAK4C,EAAIR,IAAI,kBAAC,IAAD,CAASS,GAAI,IAAMD,EAAIR,GAAIU,gBAAgB,YAAYF,EAAIP,aAIjFzF,KAAKkC,MAAMC,QACV,yBAAKgB,UAAU,SAAf,cACA,kBAAC,IAAD,KACGoC,EAAKxB,KAAI,SAAAiC,GAAG,OACX,kBAAC,IAAD,CAAO5C,IAAK4C,EAAIR,GAAIW,KAAM,IAAMH,EAAIR,IAAKQ,EAAIN,c,GAjDzCjC,IAAMC,YCLxB0C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.042c391f.chunk.js","sourcesContent":["export const weatherProviderHost = 'https://www.metaweather.com';","import { formatDate } from './utils';\nimport { weatherProviderHost } from './urls';\n\nexport default class API {\n    cache = {};\n    useLocalStorageCache = false;\n\n    storeToCache(query, res){\n        this.useLocalStorageCache ? localStorage.setItem('query:' + query, JSON.stringify(res)) : this.cache[query] = res;\n    }\n\n    restoreFromCache(query){\n        return this.useLocalStorageCache ? JSON.parse(localStorage.getItem('query:' + query)) : this.cache[query];\n    }\n\n    getLocation(city){\n        const query = 'search/?query=' + city;\n        return this.sendRequest(query);\n    }\n\n    getWeather(locationID, period){\n        const date = formatDate(new Date());\n        const query = locationID + (period === 'today' ? '/' + date : ''); \n        return this.sendRequest(query);\n    }\n\n    sendRequest(query){\n        const proxy = 'https://cors-anywhere.herokuapp.com/';\n        const api = weatherProviderHost + '/api/location/';\n        return new Promise((resolve, reject) => {\n            const cachedRes = this.restoreFromCache(query);\n            if (cachedRes){\n                resolve(cachedRes);\n                return;\n            }\n            const url = proxy + api + query;\n            fetch(url)\n                .then(res => \n                    res.status === 200 ? res.json() : {status: res.status}\n                )\n                .then(res => {\n                    this.storeToCache(query, res);\n                    resolve(res);\n                })\n                .catch(err => { \n                    console.error(err);\n                    reject(err);\n                });\n        });\n    }\n}","export function formatDate(date) {      \n    var year = date.getFullYear();\n    var month = ('0' + (date.getMonth() + 1)).slice(-2);\n    var day = ('0' + date.getDate()).slice(-2);\n    return year + '/' + month + '/' + day;\n}\n\nexport function parseDate(string) {\n    var b = string.split(/\\D+/);\n    return new Date(Date.UTC(b[0], --b[1], b[2]));\n}\n\nexport function getDayOfWeekName(date){\n    var days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n    return days[date.getDay()];\n}","import React from 'react';\nimport { weatherProviderHost } from '../../urls';\nimport './main.css';\n\nclass Today extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            loading: false,\n            data: []\n        };\n    }\n\n    getWeather(){\n        this.setState({loading: true});\n        this.props.api.getWeather(this.props.locationID, 'today').then(data => {\n            this.setState({loading: false, data: data});\n        });\n    }\n\n    componentDidMount(){\n        this.getWeather();\n    }\n\n    componentDidUpdate(prevProps){\n        if (this.props.locationID !== prevProps.locationID) {\n            this.getWeather();\n        }\n    }\n\n    render(){\n        var days = this.state.data || [];\n        var day = days[0] || {};\n        var imgSrc = weatherProviderHost + '/static/img/weather/' + day.weather_state_abbr + '.svg';\n        var img = <img src={imgSrc} alt={day.weather_state_name} className=\"weatherImage\" key=\"wi\" />;\n        var todayTemp = <h1 className=\"todayTemp\" key=\"tt\">{parseInt(day.the_temp) + 'Â°'}</h1>;\n        return this.state.loading ? \n            <div className=\"state\">Loading...</div> : \n            (days.length ? \n                [img, todayTemp] : \n                <div className=\"state\">No data</div>);\n    }\n}\n\nexport default Today;\n","import React from 'react';\nimport { weatherProviderHost } from '../../urls';\nimport { parseDate, getDayOfWeekName } from '../../utils';\nimport './main.css';\n\nclass Week extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            loading: false,\n            data: {}\n        };\n    }\n\n    getWeather(){\n        this.setState({loading: true});\n        this.props.api.getWeather(this.props.locationID, 'week').then(data => {\n            this.setState({loading: false, data: data});\n        });\n    }\n\n    componentDidMount(){\n        this.getWeather();\n    }\n\n    componentDidUpdate(prevProps){\n        if (this.props.locationID !== prevProps.locationID) {\n            this.getWeather();\n        }\n    }\n\n    mapWeatherAbbrToRowClass(abbr){\n        switch (abbr) {\n            case 'sn': \n            case 'sl': \n            case 'h': \n                return 'snowy';\n            case 't':  \n            case 'hr': \n            case 'lr': \n            case 's': \n                return 'rainy';\n            case 'hc': \n            case 'lc': \n                return 'cloudy';\n            case 'c': \n                return 'sunny';\n            default:\n                return '';\n        }\n    }\n\n    render(){\n        var days = this.state.data.consolidated_weather || [];\n        var rows = days.map(day => {\n            var imgSrc = weatherProviderHost + '/static/img/weather/' + day.weather_state_abbr + '.svg';\n            var rowClass = this.mapWeatherAbbrToRowClass(day.weather_state_abbr);\n            var date = parseDate(day.applicable_date);\n            var dayOfWeek = getDayOfWeekName(date);\n            return <tr key={day.applicable_date} className={rowClass}>\n                <td className=\"date\">{day.applicable_date}, {dayOfWeek}</td>\n                <td>{parseInt(day.the_temp) + 'Â°'}</td>\n                <td className=\"weatherIcon\"><img src={imgSrc} alt={day.weather_state_name} /></td>\n            </tr>\n        });\n        return this.state.loading ? \n            <div className=\"state\">Loading...</div> : \n            (days.length ? \n                <table className=\"week\"><tbody>{rows}</tbody></table> : \n                <div className=\"state\">No data</div>);\n    }\n}\n\nexport default Week;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch, Route, NavLink\n} from \"react-router-dom\";\nimport API from './API';\nimport Today from './components/Today';\nimport Week from './components/Week';\nimport './App.css';\n\nclass App extends React.Component {\n  api = new API();\n  timeout;\n\n  constructor(){\n    super();\n    this.state = {\n      loading: false,\n      locationQuery: 'Moscow',\n      locationFound: true,\n      locationID: 2122265\n    };\n  }\n\n  onLocationChange(e){\n    this.setState({locationQuery: e.target.value});\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.setState({loading: true});\n      this.api.getLocation(this.state.locationQuery).then(data => {\n        const locationFound = !!data[0];\n        const locationID = locationFound ? data[0].woeid : 0;\n        const locationQuery = locationFound ? data[0].title : this.state.locationQuery;\n        this.setState({loading: false, locationQuery, locationFound, locationID});\n      });\n    }, 500);\n  }\n\n  render(){\n    const tabs = [\n      {id: 'today', label: 'Today', cmp: <Today api={this.api} locationID={this.state.locationID} />},\n      {id: 'week', label: 'Week', cmp: <Week api={this.api} locationID={this.state.locationID} />}\n    ];\n    const queryState = !this.state.locationFound ? 'invalid' : '';\n    return (\n      <Router>\n        <input type=\"text\" className={\"locationQuery \" + queryState} value={this.state.locationQuery} \n          onChange={e => this.onLocationChange(e)} disabled={this.state.loading} />\n        <nav>\n          <ul>\n            {tabs.map(tab => \n              <li key={tab.id}><NavLink to={'/' + tab.id} activeClassName=\"selected\">{tab.label}</NavLink></li>\n            )}\n          </ul>\n        </nav>\n        {this.state.loading ? \n          <div className=\"state\">Loading...</div> : \n          <Switch>\n            {tabs.map(tab => \n              <Route key={tab.id} path={'/' + tab.id}>{tab.cmp}</Route>\n            )}\n          </Switch>\n        }\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}